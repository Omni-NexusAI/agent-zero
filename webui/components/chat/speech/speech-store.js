aW1wb3J0IHsgY3JlYXRlU3RvcmUgfSBmcm9tICIvanMvQWxwaW5lU3RvcmUu
anMiOwppbXBvcnQgeyB1cGRhdGVDaGF0SW5wdXQsIHNlbmRNZXNzYWdlIH0g
ZnJvbSAiL2luZGV4LmpzIjsKaW1wb3J0IHsgc2xlZXAgfSBmcm9tICIvanMv
c2xlZXAuanMiOwppbXBvcnQgeyBzdG9yZSBhcyBtaWNyb3Bob25lU2V0dGlu
Z1N0b3JlIH0gZnJvbSAiL2NvbXBvbmVudHMvc2V0dGluZ3Mvc3BlZWNoL21p
Y3JvcGhvbmUtc2V0dGluZy1zdG9yZS5qcyI7Cgpjb25zdCBTdGF0dXMgPSB7
CiAgSU5BQ1RJVkU6ICJpbmFjdGl2ZSIsCiAgQUNUSVZBVElORzogImFjdGl2
YXRpbmciLAogIExJU1RFTklORzogImxpc3RlbmluZyIsCiAgUkVDT1JESU5H
OiAicmVjb3JkaW5nIiwKICBXQUlUSU5HOiAid2FpdGluZyIsCiAgUFJPQ0VT
U0lORzogInByb2Nlc3NpbmciLAp9OwoKLy8gQ3JlYXRlIHRoZSBzcGVlY2gg
c3RvcmUKY29uc3QgbW9kZWwgPSB7CiAgLy8gU1RUIFNldHRpbmdzCiAgc3R0
X21vZGVsX3NpemU6ICJ0aW55IiwKICBzdHRfbGFuZ3VhZ2U6ICJlbiIsCiAg
c3R0X3NpbGVuY2VfdGhyZXNob2xkOiAwLjA1LAogIHN0dF9zaWxlbmNlX2R1
cmF0aW9uOiAxMDAwLAogIHN0dF93YWl0aW5nX3RpbWVvdXQ6IDIwMDAsCgog
IC8vIFRUUyBTZXR0aW5ncwogIHR0c19rb2tvcm86IGZhbHNlLAogIHR0c19r
b2tvcm9fdm9pY2U6ICJhbV9wdWNrIiwKICB0dHNfa29rb3JvX3ZvaWNlX3Nl
Y29uZGFyeTogIiIsCiAgdHRzX2tva29yb19ncHU6IHRydWUsCiAgdHRzX3Jl
Y29yZF9tb2RlOiBmYWxzZSwKCiAgLy8gVFRTIFN0YXRlCiAgaXNTcGVha2lu
ZzogZmFsc2UsCiAgc3BlYWtpbmdJZDogIiIsCiAgc3BlYWtpbmdUZXh0OiAi
IiwKICBjdXJyZW50QXVkaW86IG51bGwsCiAgYXVkaW9FbDogbnVsbCwKICBh
dWRpb0NvbnRleHQ6IG51bGwsCiAgdXNlckhhc0ludGVyYWN0ZWQ6IGZhbHNl
LAogIHN0b3BTcGVlY2hDaGFpbjogZmFsc2UsCiAgdHRzU3RyZWFtOiBudWxs
LAoKICAvLyBTVFQgU3RhdGUKICBtaWNyb3Bob25lSW5wdXQ6IG51bGwsCiAg
aXNQcm9jZXNzaW5nQ2xpY2s6IGZhbHNlLAogIHNlbGVjdGVkRGV2aWNlOiBu
dWxsLAoKICAvLyBHZXR0ZXIgZm9yIG1pY1N0YXR1cyAtIGRlbGVnYXRlcyB0
byBtaWNyb3Bob25lSW5wdXQKICBnZXQgbWljU3RhdHVzKCkgewogICAgcmV0
dXJuIHRoaXMubWljcm9waG9uZUlucHV0Py5zdGF0dXMgfHwgU3RhdHVzLklO
QUNUSVZFOwogIH0sCgogIHVwZGF0ZU1pY3JvcGhvbmVCdXR0b25VSSgpIHsK
ICAgIGNvbnN0IG1pY3JvcGhvbmVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVt
ZW50QnlJZCgibWljcm9waG9uZS1idXR0b24iKTsKICAgIGlmICghbWljcm9w
aG9uZUJ1dHRvbikgcmV0dXJuOwogICAgY29uc3Qgc3RhdHVzID0gdGhpcy5t
aWNTdGF0dXM7CiAgICBtaWNyb3Bob25lQnV0dG9uLmNsYXNzTGlzdC5yZW1v
dmUoCiAgICAgICJtaWMtaW5hY3RpdmUiLAogICAgICAibWljLWFjdGl2YXRp
bmciLAogICAgICAibWljLWxpc3RlbmluZyIsCiAgICAgICJtaWMtcmVjb3Jk
aW5nIiwKICAgICAgIm1pYy13YWl0aW5nIiwKICAgICAgIm1pYy1wcm9jZXNz
aW5nIgogICAgKTsKICAgIG1pY3JvcGhvbmVCdXR0b24uY2xhc3NMaXN0LmFk
ZChgbWljLSR7c3RhdHVzLnRvTG93ZXJDYXNlKCl9YCk7CiAgICBtaWNyb3Bo
b25lQnV0dG9uLnNldEF0dHJpYnV0ZSgiZGF0YS1zdGF0dXMiLCBzdGF0dXMp
OwogIH0sCgogIGFzeW5jIGhhbmRsZU1pY3JvcGhvbmVDbGljaygpIHsKICAg
IGlmICh0aGlzLmlzUHJvY2Vzc2luZ0NsaWNrKSByZXR1cm47CiAgICB0aGlz
LmlzUHJvY2Vzc2luZ0NsaWNrID0gdHJ1ZTsKICAgIHRyeSB7CiAgICAgIC8v
IHJlc2V0IG1pYyBpbnB1dCBpZiBkZXZpY2UgaGFzIGNoYW5nZWQgaW4gc2V0
dGluZ3MKICAgICAgY29uc3QgZGV2aWNlID0gbWljcm9waG9uZVNldHRpbmdT
dG9yZS5nZXRTZWxlY3RlZERldmljZSgpOwogICAgICBpZiAoZGV2aWNlICE9
IHRoaXMuc2VsZWN0ZWREZXZpY2UpIHsKICAgICAgICB0aGlzLnNlbGVjdGVk
RGV2aWNlID0gZGV2aWNlOwogICAgICAgIHRoaXMubWljcm9waG9uZUlucHV0
ID0gbnVsbDsKICAgICAgICBjb25zb2xlLmxvZygiRGV2aWNlIGNoYW5nZWQs
IG1pY3JvcGhvbmVJbnB1dCByZXNldCIpOwogICAgICB9CgogICAgICBpZiAo
IXRoaXMubWljcm9waG9uZUlucHV0KSB7CiAgICAgICAgYXdhaXQgdGhpcy5p
bml0TWljcm9waG9uZSgpOwogICAgICB9CgogICAgICBpZiAodGhpcy5taWNy
b3Bob25lSW5wdXQpIHsKICAgICAgICBhd2FpdCB0aGlzLm1pY3JvcGhvbmVJ
bnB1dC50b2dnbGUoKTsKICAgICAgfQogICAgfSBmaW5hbGx5IHsKICAgICAg
c2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgdGhpcy5pc1Byb2Nlc3NpbmdD
bGljayA9IGZhbHNlOwogICAgICB9LCAzMDApOwogICAgfQogIH0sCgogIC8v
IEluaXRpYWxpemUgc3BlZWNoIGZ1bmN0aW9uYWxpdHkKICBhc3luYyBpbml0
KCkgewogICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTsKICAgIHRoaXMu
c2V0dXBCcm93c2VyVFRTKCk7CiAgICB0aGlzLnNldHVwVXNlckludGVyYWN0
aW9uSGFuZGxpbmcoKTsKICB9LAoKICAvLyBMb2FkIHNldHRpbmdzIGZyb20g
c2VydmVyCiAgYXN5bmMgbG9hZFNldHRpbmdzKCkgewogICAgdHJ5IHsKICAg
ICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaEFwaSgiL3NldHRpbmdz
X2dldCIsIHsgbWV0aG9kOiAiUE9TVCIgfSk7CiAgICAgIGNvbnN0IGRhdGEg
PSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgICAgIGNvbnN0IHNwZWVjaFNl
Y3Rpb24gPSBkYXRhLnNldHRpbmdzLnNlY3Rpb25zLmZpbmQoCiAgICAgICAg
KHMpID0+IHMudGl0bGUgPT09ICJTcGVlY2giCiAgICAgICk7CgogICAgICBp
ZiAoc3BlZWNoU2VjdGlvbikgewogICAgICAgIHNwZWVjaFNlY3Rpb24uZmll
bGRzLmZvckVhY2goKGZpZWxkKSA9PiB7CiAgICAgICAgICBpZiAodGhpcy5o
YXNPd25Qcm9wZXJ0eShmaWVsZC5pZCkpIHsKICAgICAgICAgICAgdGhpc1tm
aWVsZC5pZF0gPSBmaWVsZC52YWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9
KTsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgd2luZG93
LnRvYXN0RmV0Y2hFcnJvcigiRmFpbGVkIHRvIGxvYWQgc3BlZWNoIHNldHRp
bmdzIiwgZXJyb3IpOwogICAgICBjb25zb2xlLmVycm9yKCJGYWlsZWQgdG8g
bG9hZCBzcGVlY2ggc2V0dGluZ3M6IiwgZXJvcik7CiAgICB9CiAgfSwKCiAg
Ly8gU2V0dXAgYnJvd3NlciBUVFMKICBzZXR1cEJyb3dzZXJUVFMoKSB7CiAg
ICB0aGlzLnN5bnRoID0gd2luZG93LnNwZWVjaFN5bnRoZXNpczsKICAgIHRo
aXMuYnJvd3NlclV0dGVyYW5jZSA9IG51bGw7CiAgfSwKCiAgLy8gU2V0dXAg
dXNlciBpbnRlcmFjdGlvbiBoYW5kbGluZyBmb3IgYXV0b3BsYXkgcG9saWN5
CiAgc2V0dXBVc2VySW50ZXJhY3Rpb25IYW5kbGluZygpIHsKICAgIGNvbnN0
IGVuYWJsZUF1ZGlvID0gKCkgPT4gewogICAgICBpZiAoIXRoaXMudXNlckhh
c0ludGVyYWN0ZWQpIHsKICAgICAgICB0aGlzLnVzZXJIYXNJbnRlcmFjdGVk
ID0gdHJ1ZTsKICAgICAgICBjb25zb2xlLmxvZygiVXNlciBpbnRlcmFjdGlv
biBkZXRlY3RlZCAtIGF1ZGlvIHBsYXliYWNrIGVuYWJsZWQiKTsKCiAgICAg
ICAgLy8gQ3JlYXRlIGEgZHVtbXkgYXVkaW8gY29udGV4dCB0byAidW5sb2Nr
IiBhdWRpbwogICAgICAgIHRyeSB7CiAgICAgICAgICB0aGlzLmF1ZGlvQ29u
dGV4dCA9IG5ldyAod2luZG93LkF1ZGlvQ29udGV4dCB8fAogICAgICAgICAg
ICB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KSgpOwogICAgICAgICAgdGhp
cy5hdWRpb0NvbnRleHQucmVzdW1lKCk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS5sb2coIkF1ZGlvQ29udGV4dCBub3QgYXZhaWxhYmxlIik7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIC8vIExpc3RlbiBmb3IgYW55IHVzZXIgaW50ZXJhY3Rpb24KICAgIGNvbnN0IGV2ZW50cyA9IFsiY2xpY2siLCAidG91Y2hzdGFydCIsICJrZXlkb3duIiwgIm1vdXNlZG93biJdOwogICAgZXZlbnRzLmZvckVhY2goKGV2ZW50KSA9PiB7CiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGVuYWJsZUF1ZGlvLCB7CiAgICAgICAgb25jZTogdHJ1ZSwKICAgICAgICBwYXNzaXZlOiB0cnVlLAogICAgICB9KTsKICAgIH0pOwogIH0sCgogIC8vIG1haW4gc3BlYWsgZnVuY3Rpb24sIGFsbG93cyB0byBzcGVhayBhIHN0cmVhbSBvZiB0ZXh0IHRoYXQgaXMgZ2VuZXJhdGVkIHBpZWNlIGJ5IHBpZWNlCiAgYXN5bmMgc3BlYWtTdHJlYW0oaWQsIHRleHQsIGZpbmlzaGVkID0gZmFsc2UpIHsKICAgIC8vIGlmIGFscmVhZHkgcnVubmluZyB0aGUgc2FtZSBzdHJlYW0sIGRvIG5vdGhpbmcKICAgIGlmICgKICAgICAgdGhpcy50dHNTdHJlYW0gJiYKICAgICAgdGhpcy50dHNTdHJlYW0uaWQgPT09IGlkICYmCiAgICAgIHRoaXMudHRzU3RyZWFtLnRleHQgPT09IHRleHQgJiYKICAgICAgdGhpcy50dHNTdHJlYW0uZmluaXNoZWQgPT09IGZpbmlzaGVkCiAgICApCiAgICAgIHJldHVybjsKCiAgICAvLyBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCAoYWZ0ZXIgcmVsb2FkKSwgZG8gbm90IHBsYXkgYXVkaW8KICAgIGlmICghdGhpcy51c2VySGFzSW50ZXJhY3RlZCkgcmV0dXJuIHRoaXMuc2hvd0F1ZGlvUGVybWlzc2lvblByb21wdCgpOwoKICAgIC8vIG5ldyBzdHJlYW0KICAgIGlmICghdGhpcy50dHNTdHJlYW0gfHwgdGhpcy50dHNTdHJlYW0uaWQgIT09IGlkKSB7CiAgICAgIC8vIHRoaXMuc3RvcCgpOyAvLyBzdG9wIHBvdGVudGlhbCBwcmV2aW91cyBzdHJlYW0KICAgICAgLy8gY3JlYXRlIG5ldyBzdHJlYW0gZGF0YQogICAgICB0aGlzLnR0c1N0cmVhbSA9IHsKICAgICAgICBpZCwKICAgICAgICB0ZXh0LAogICAgICAgIGZpbmlzaGVkLAogICAgICAgIHJ1bm5pbmc6IGZhbHNlLAogICAgICAgIGxhc3RDaHVua0luZGV4OiAtMSwKICAgICAgICBzdG9wcGVkOiBmYWxzZSwKICAgICAgICBjaHVua3M6IFtdLAogICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgLy8gdXBkYXRlIGV4aXN0aW5nIHN0cmVhbSBkYXRhCiAgICAgIHRoaXMudHRzU3RyZWFtLmZpbmlzaGVkID0gZmluaXNoZWQ7CiAgICAgIHRoaXMudHRzU3RyZWFtLnRleHQgPSB0ZXh0OwogICAgfQoKICAgIC8vIGNsZWFudXAgdGV4dAogICAgY29uc3QgY2xlYW5UZXh0ID0gdGhpcy5jbGVhblRleHQodGV4dCk7CiAgICBpZiAoIWNsZWFuVGV4dC50cmltKCkpIHJldHVybjsKCiAgICAvLyBjaHVuayBpdCBmb3IgZmFzdGVyIHByb2Nlc3NpbmcKICAgIHRoaXMudHRzU3RyZWFtLmNodW5rcyA9IHRoaXMuY2h1bmtUZXh0KGNsZWFuVGV4dCk7CiAgICBpZiAodGhpcy50dHNTdHJlYW0uY2h1bmtzLmxlbmd0aCA9PSAwKSByZXR1cm47CgogICAgLy8gaWYgc3RyZWFtIHdhcyBhbHJlYWR5IHJ1bm5pbmcsIGp1c3QgdXBkYXRpbmcgY2h1bmtzIGlzIGVub3VnaAogICAgaWYgKHRoaXMu
